@model WorkflowVersionDetails

@{
    ViewData["Title"] = "Workflow Versions - " + Model.WorkflowType.Name;
}
<input type="hidden" id="compareVersionOld" value="" />
<input type="hidden" id="compareVersionNew" value="" />
<div class="container py-4">
    <a asp-route="VersioningIndex" class="back-link text-secondary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" class="me-1">
            <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z" />
        </svg>
        Back to Workflow Types
    </a>

    <div class="row mb-4">
        <div class="col-md-12">
            <h1>@Model.WorkflowType.Name</h1>
            <p class="text-muted">@Model.WorkflowType.WorkflowTypeId</p>
            @if (Model.VersionInfo.LastRestoredTime is not null)
            {
                var time = await DisplayAsync(await New.Timespan(Utc: Model.VersionInfo.LastRestoredTime.GetValueOrDefault(), Format: "g"));
                <p>Last restored: <em>@time</em></p>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-lg-5 mb-4 mb-lg-0">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Version History</h5>
                    <div class="d-flex">
                        <button id="compareVersionsBtn" class="btn btn-outline-primary btn-sm me-2" disabled>
                            Compare
                        </button>
                        <div class="input-group" style="width: 200px;">
                            <input type="text" id="searchVersions" class="form-control form-control-sm" placeholder="Filter versions...">
                            <button class="btn btn-outline-secondary btn-sm" type="button">
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
                <div id="versionCommentSection" class="p-3 border-bottom bg-light" style="display: none;">
                    <h6 class="mb-2">Version Comment:</h6>
                    <p id="versionCommentText" class="mb-0 text-muted fst-italic">No comment available for this version.</p>
                </div>

                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="versionsTable">
                            <thead>
                                <tr>
                                    <th>Compare</th>
                                    <th>Version</th>
                                    <th>Date Created</th>
                                    <th class="text-end">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="versionsTableBody">
                                <!-- Active workflow row -->
                                <tr class="active-row" data-json="@Model.ActiveJson">
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input compare-checkbox" type="checkbox" value="active" id="compare-active">
                                        </div>
                                    </td>
                                    <td>
                                        <span class="fw-bold">ACTIVE</span>
                                    </td>
                                    <td></td>
                                    <td class="text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-secondary view-active-btn">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                    <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z" />
                                                    <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z" />
                                                </svg>
                                            </button>
                                            <button class="btn btn-outline-primary" id="createNewVersionBtn" data-workflow-id="@Model.WorkflowType.WorkflowTypeId">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                    <path d="M8 0a1 1 0 0 1 1 1v6h6a1 1 0 1 1 0 2H9v6a1 1 0 1 1-2 0V9H1a1 1 0 0 1 0-2h6V1a1 1 0 0 1 1-1z" />
                                                </svg>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                @foreach (var version in Model.Versions)
                                {
                                    var isCurrent = Model.VersionInfo != null && version.Version == Model.VersionInfo.CurrentVersion;
                                    var isPrevious = Model.VersionInfo != null && version.Version == Model.VersionInfo.PreviousVersion;
                                    var rowClass = isCurrent ? "current" : isPrevious ? "previous" : "";

                                    <tr class="version-row @rowClass"
                                        data-version="@version.Version"
                                        data-date="@version.CreatedUtc.ToString("g")"
                                        data-json="@version.Json">
                                        <td>
                                            <div class="form-check">
                                                <input class="form-check-input compare-checkbox" type="checkbox" value="@version.Version" id="compare-@version.Version">
                                            </div>
                                        </td>
                                        <td>
                                            @version.Version
                                            @if (isCurrent)
                                            {
                                                <span class="badge bg-success badge-current ms-2">Current</span>
                                            }
                                            else if (isPrevious)
                                            {
                                                <span class="badge bg-info badge-previous ms-2">Previous</span>
                                            }
                                        </td>
                                        <td>@version.CreatedUtc.ToString("g")</td>
                                        <td class="text-end">
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-secondary view-btn" data-version="@version.Version">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                        <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z" />
                                                        <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z" />
                                                    </svg>
                                                </button>

                                                <button class="btn btn-outline-primary restore-btn"
                                                        data-version="@version.Version"
                                                        data-date="@version.CreatedUtc.ToString("g")">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z" />
                                                        <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-7">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Version Details <span id="selectedVersionDate" class="text-muted"></span></h5>
                    <div>
                        <button id="restoreSelectedVersionBtn" class="btn btn-outline-primary btn-sm me-2" disabled>
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16" class="me-1">
                                <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z" />
                                <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z" />
                            </svg>
                            Restore This Version
                        </button>
                        <button id="copyJsonBtn" class="btn btn-outline-secondary btn-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16" class="me-1">
                                <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" />
                                <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" />
                            </svg>
                            Copy JSON
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <pre id="jsonViewer" class="json-viewer">Select a version to view details</pre>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="restoreConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Version Restore</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to restore version <span id="restoreVersionId"></span> created on <span id="restoreVersionDate"></span>?</p>
                <p>This will replace the current active workflow version.</p>
                <input type="hidden" id="restoreVersionInput" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmRestoreBtn">Restore Version</button>
            </div>
        </div>
    </div>
</div>

<!--Create revision modal-->
<div class="modal fade" id="createVersionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Version</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="versionComment" class="form-label">Version Comment (Optional)</label>
                    <textarea class="form-control" id="versionComment" rows="3"
                              placeholder="Describe the changes in this version..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmCreateVersionBtn">Create Version</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const workflowTypeId = '@Model.WorkflowType.WorkflowTypeId';
        let selectedVersion = null;

        // Map to store version comments
        const versionComments = new Map();

        // Initialize version comments map from serialized data
        const versionCommentsData = @Html.Raw(Json.Serialize(Model.VersionComments));
        if (versionCommentsData) {
            versionCommentsData.forEach(comment => {
                versionComments.set(comment.version, comment.comment);
            });
        }

        // Initialize version selection
        if (document.querySelector('.version-row')) {
            selectedVersion = document.querySelector('.version-row').dataset.version;
            updateSelectedVersion(selectedVersion);
        }

        // Click handler for active row
        document.querySelector('.active-row').addEventListener('click', function(e) {
            // Don't trigger if clicking on a button
            if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
                return;
            }

            displayActiveJson();
        });

        // View Active JSON button
        document.querySelector('.view-active-btn').addEventListener('click', function() {
            displayActiveJson();
        });

        function displayActiveJson() {
            const activeRow = document.querySelector('.active-row');
            if (activeRow && activeRow.dataset.json) {
                // Deselect other rows
                document.querySelectorAll('.version-row').forEach(row => {
                    row.classList.remove('table-active');
                });

                // Highlight active row
                activeRow.classList.add('table-active');

                // Display active JSON
                const jsonViewer = document.getElementById('jsonViewer');
                try {
                    let jsonData;

                    // First try to parse the JSON if it's a string
                    try {
                        jsonData = JSON.parse(activeRow.dataset.json);
                    } catch (parseError) {
                        // If it's already an object or can't be parsed, use as is
                        jsonData = activeRow.dataset.json;
                    }

                    // Format with proper indentation for readability
                    let formattedJson;
                    if (typeof jsonData === 'object') {
                        formattedJson = JSON.stringify(jsonData, null, 2);
                    } else {
                        formattedJson = jsonData;
                    }

                    // Apply to the pre element
                    jsonViewer.textContent = formattedJson;
                } catch (e) {
                    console.error('Error processing JSON:', e);
                    jsonViewer.textContent = 'Error displaying JSON: ' + e.message;
                    jsonViewer.classList.add('json-error');
                }

                // Update header and disable restore button
                document.getElementById('selectedVersionDate').textContent = " (Active)";
                document.getElementById('restoreSelectedVersionBtn').disabled = true;

                // Hide comment section for active JSON
                document.getElementById('versionCommentSection').style.display = 'none';

                // Set selectedVersion to null since we're viewing active JSON
                selectedVersion = null;
            }
        }

        // Click handler for version rows
        document.querySelectorAll('.version-row').forEach(row => {
            row.addEventListener('click', function(e) {
                // Don't trigger if clicking on a button
                if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
                    return;
                }
                selectedVersion = this.dataset.version;
                updateSelectedVersion(selectedVersion);
            });
        });

        // View button click handler
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                selectedVersion = this.dataset.version;
                updateSelectedVersion(selectedVersion);
            });
        });

        // Restore button click handler
        document.querySelectorAll('.restore-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                selectedVersion = this.dataset.version;
                updateSelectedVersion(selectedVersion);
                openRestoreModal(this.dataset.version, this.dataset.date);
            });
        });

        // Create new version button - changed to show modal
        document.getElementById('createNewVersionBtn').addEventListener('click', function() {
            // Clear previous comment if any
            document.getElementById('versionComment').value = '';

            // Show the create version modal
            const modal = new bootstrap.Modal(document.getElementById('createVersionModal'));
            modal.show();
        });

        // Confirm create version button
        document.getElementById('confirmCreateVersionBtn').addEventListener('click', function() {
            const comment = document.getElementById('versionComment').value;
            createNewVersion(comment);

            // Hide the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('createVersionModal'));
            modal.hide();
        });

        // Restore selected version button
        document.getElementById('restoreSelectedVersionBtn').addEventListener('click', function() {
            if (selectedVersion) {
                const versionRow = document.querySelector(`.version-row[data-version="${selectedVersion}"]`);
                if (versionRow) {
                    openRestoreModal(selectedVersion, versionRow.dataset.date);
                }
            }
        });

        // Confirm restore button
        document.getElementById('confirmRestoreBtn').addEventListener('click', function() {
            const versionToRestore = document.getElementById('restoreVersionInput').value;
            if (versionToRestore) {
                restoreVersion(versionToRestore);
            }
        });

        // Copy JSON button
        document.getElementById('copyJsonBtn').addEventListener('click', function() {
            const jsonViewer = document.getElementById('jsonViewer');
            if (jsonViewer) {
                navigator.clipboard.writeText(jsonViewer.textContent).then(() => {
                    const originalText = this.innerHTML;
                    this.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16" class="me-1"><path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/></svg> Copied!';
                    setTimeout(() => {
                        this.innerHTML = originalText;
                    }, 2000);
                });
            }
        });

        // Search versions
        document.getElementById('searchVersions').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            document.querySelectorAll('.version-row').forEach(row => {
                const dateText = row.dataset.date.toLowerCase();
                const versionText = row.dataset.version.toString().toLowerCase();

                if (dateText.includes(searchTerm) || versionText.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });

            // Always keep the active row visible
            document.querySelector('.active-row').style.display = '';
        });

        // Improved function to update the selected version display
        function updateSelectedVersion(versionId) {
            // Update row highlighting
            document.querySelectorAll('.version-row, .active-row').forEach(row => {
                row.classList.remove('table-active');
            });

            const selectedRow = document.querySelector(`.version-row[data-version="${versionId}"]`);
            if (!selectedRow) return;

            selectedRow.classList.add('table-active');

            // Update JSON viewer with better error handling and formatting
            const jsonViewer = document.getElementById('jsonViewer');
            try {
                let jsonData;

                // First try to parse the JSON if it's a string
                try {
                    jsonData = JSON.parse(selectedRow.dataset.json);
                } catch (parseError) {
                    // If it's already an object or can't be parsed, use as is
                    jsonData = selectedRow.dataset.json;
                }

                // Format with proper indentation for readability
                let formattedJson;
                if (typeof jsonData === 'object') {
                    formattedJson = JSON.stringify(jsonData, null, 2);
                } else {
                    formattedJson = jsonData;
                }

                // Apply to the pre element
                jsonViewer.textContent = formattedJson;
            } catch (e) {
                console.error('Error processing JSON:', e);
                jsonViewer.textContent = 'Error displaying JSON: ' + e.message;
                jsonViewer.classList.add('json-error');
            }

            // Update date display
            document.getElementById('selectedVersionDate').textContent = `(${selectedRow.dataset.date})`;

            // Update restore button state
            document.getElementById('restoreSelectedVersionBtn').disabled = false;

            // Display version comment if available
            const commentSection = document.getElementById('versionCommentSection');
            const commentText = document.getElementById('versionCommentText');
            console.log(versionComments, versionId, versionComments.has(versionId));
            if (versionComments.has(versionId)) {
                const comment = versionComments.get(versionId);
                if (comment && comment.trim() !== '') {
                    commentText.textContent = comment;
                    commentSection.style.display = 'block';
                } else {
                    commentText.textContent = 'No comment available for this version.';
                    commentSection.style.display = 'block';
                }
            } else {
                commentText.textContent = 'No comment available for this version.';
                commentSection.style.display = 'block';
            }
        }

        // Function to open restore modal
        function openRestoreModal(versionId, formattedDate) {
            document.getElementById('restoreVersionId').textContent = versionId;
            document.getElementById('restoreVersionDate').textContent = formattedDate;
            document.getElementById('restoreVersionInput').value = versionId;

            const modal = new bootstrap.Modal(document.getElementById('restoreConfirmModal'));
            modal.show();
        }

        // Function to create a new version - updated to include comment
        function createNewVersion(comment) {
            fetch('@Url.RouteUrl("VersioningCreatePost")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        workflowTypeId: workflowTypeId,
                        comment: comment
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to create version');
                    }
                    return response.json();
                })
                .then(data => {
                    // Reload the page to show the new version
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to create new version. Please try again.');
                });
        }

        // Function to restore a version
        function restoreVersion(versionId) {
            fetch('@Url.RouteUrl("VersioningRestorePost")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        workflowTypeId: workflowTypeId,
                        version: versionId,
                        requestTimestamp: new Date().toISOString()
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to restore version');
                    }
                    return response.json();
                })
                .then(data => {
                    // Close the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('restoreConfirmModal'));
                    modal.hide();

                    // Reload the page to show updated version info
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to restore version. Please try again.');
                });
        }

        // Version comparison functionality
        const compareCheckboxes = document.querySelectorAll('.compare-checkbox');
        const compareVersionsBtn = document.getElementById('compareVersionsBtn');
        const compareVersionOld = document.getElementById('compareVersionOld');
        const compareVersionNew = document.getElementById('compareVersionNew');

        compareCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateCompareState);
        });

        function updateCompareState() {
            const checkedBoxes = document.querySelectorAll('.compare-checkbox:checked');

            // Enable/disable compare button based on selection count
            if (checkedBoxes.length === 2) {
                compareVersionsBtn.disabled = false;

                // Store the selected versions
                const values = Array.from(checkedBoxes).map(cb => cb.value);
                compareVersionOld.value = values[0] === 'active' ? '' : values[0];
                compareVersionNew.value = values[1] === 'active' ? '' : values[1];

                // Disable other checkboxes
                compareCheckboxes.forEach(cb => {
                    if (!cb.checked) {
                        cb.disabled = true;
                    }
                });
            } else if (checkedBoxes.length < 2) {
                compareVersionsBtn.disabled = true;

                // Enable all checkboxes
                compareCheckboxes.forEach(cb => {
                    cb.disabled = false;
                });
            } else {
                // If somehow more than 2 are selected, uncheck the last one
                checkedBoxes[checkedBoxes.length - 1].checked = false;
                updateCompareState();
            }
        }

        // Handle compare button click
        compareVersionsBtn.addEventListener('click', function() {
            const oldVersion = compareVersionOld.value;
            const newVersion = compareVersionNew.value;

            // Navigate to diff view
            window.location.href = `@Url.RouteUrl("VersioningDiff")?id=${workflowTypeId}&oldVersion=${oldVersion}&newVersion=${newVersion}`;
        });
    });
</script>

<style at="Foot">
    .version-row,
    .active-row {
        transition: background-color 0.2s;
        cursor: pointer;
    }

        .version-row:hover,
        .active-row:hover {
            background-color: rgba(0,0,0,0.03);
        }

    .active-row {
        background-color: rgba(13, 110, 253, 0.03);
        font-weight: 500;
    }

    .version-row.current {
        background-color: rgba(25, 135, 84, 0.1);
    }

    .version-row.previous {
        background-color: rgba(13, 110, 253, 0.05);
    }

    /* Improved JSON viewer styling */
    .json-viewer {
        max-height: 500px;
        overflow-y: auto;
        font-family: "Consolas", "Monaco", "Courier New", monospace;
        font-size: 0.9rem;
        white-space: pre-wrap;
        background-color: #f8f9fa;
        border-radius: 4px;
        padding: 1rem;
        color: #333;
        line-height: 1.5;
        border: 1px solid #e9ecef;
    }

    .json-error {
        color: #dc3545;
    }

    .badge-current, .badge-previous {
        font-size: 0.7rem;
        padding: 0.2rem 0.4rem;
    }

    .back-link {
        display: inline-flex;
        align-items: center;
        margin-bottom: 1rem;
        text-decoration: none;
    }

        .back-link:hover {
            text-decoration: underline;
        }

    .btn-group-sm {
        display: inline-flex;
    }
</style>
